import { useState } from 'react'
import { parseEther } from 'viem'
import { motion } from 'framer-motion'
import { 
  AlertTriangle, 
  Plus, 
  Search, 
  ThumbsUp,
  ThumbsDown,
  Clock,
  CheckCircle,
  XCircle,
  Flag,
  ExternalLink,
  Calendar,
  User,
  Coins,
  Award
} from 'lucide-react'
import { useAppStore, type Report } from '../store/appStore'
import { formatDate, formatEther, formatAddress } from '../utils/formatters'
import { uploadTextToIPFS } from '../utils/uploadToIpfs'
import { client } from '../utils/config'
import toast from 'react-hot-toast'

// Define local enums if not available from types
enum ViolationType {
  COPYRIGHT_INFRINGEMENT = 'copyright',
  AI_GENERATED_FRAUD = 'ai_fraud', 
  MEME_THEFT = 'plagiarism',
  UNAUTHORIZED_USE = 'unauthorized_use',
  TRADEMARK = 'trademark',
  OTHER = 'other'
}

enum ReportStatus {
  PENDING = 'pending',
  VOTING = 'under_review', 
  RESOLVED_VALID = 'resolved',
  RESOLVED_INVALID = 'rejected',
  DISPUTED = 'disputed'
}

// Mock data for demonstration using the Report type from store
const mockReports: Report[] = [
  {
    id: '1',
    reporterAddress: '0x1234567890123456789012345678901234567890',
    targetIPAsset: 'ip-001',
    violationType: 'copyright',
    description: 'This artwork appears to be a direct copy of my original piece published on Instagram last month.',
    evidence: {
      urls: ['https://example.com/evidence1.jpg', 'https://example.com/evidence2.jpg'],
      screenshots: [],
      documents: [],
      metadata: {}
    },
    submittedAt: new Date('2024-03-19T14:30:00Z'),
    status: 'under_review',
    priority: 'medium',
    votes: [
      {
        validator: '0x2345678901234567890123456789012345678901',
        decision: 'valid',
        reasoning: 'Clear evidence of copyright infringement',
        votedAt: new Date('2024-03-20T10:00:00Z'),
        stake: BigInt('1000000000000000000'), // 1 token
      },
      {
        validator: '0x3456789012345678901234567890123456789012',
        decision: 'invalid',
        reasoning: 'Not enough evidence to prove infringement',
        votedAt: new Date('2024-03-20T11:00:00Z'),
        stake: BigInt('500000000000000000'), // 0.5 tokens
      },
    ],
    rewards: {
      reporter: BigInt('5000000000000000000'), // 5 tokens
      validators: BigInt('1500000000000000000'), // 1.5 tokens
    }
  },
  {
    id: '2',
    reporterAddress: '0x2345678901234567890123456789012345678901',
    targetIPAsset: 'ip-002',
    violationType: 'ai_fraud',
    description: 'This image is generated by AI but being sold as original human artwork.',
    evidence: {
      urls: ['https://example.com/ai-detection.json'],
      screenshots: [],
      documents: [],
      metadata: {}
    },
    submittedAt: new Date('2024-03-18T09:15:00Z'),
    status: 'resolved',
    priority: 'high',
    votes: [],
    resolution: {
      decision: 'upheld',
      reasoning: 'AI detection confirmed the claim',
      resolvedAt: new Date('2024-03-20T16:45:00Z'),
      resolvedBy: '0x1234567890123456789012345678901234567890',
      compensation: BigInt('3000000000000000000'), // 3 tokens
    },
    rewards: {
      reporter: BigInt('3000000000000000000'), // 3 tokens
      validators: BigInt('0'), // 0 tokens
    }
  },
  {
    id: '3',
    reporterAddress: '0x3456789012345678901234567890123456789012',
    targetIPAsset: 'ip-003',
    violationType: 'plagiarism',
    description: 'Popular meme reposted without attribution or permission from original creator.',
    evidence: {
      urls: ['https://example.com/original-meme.jpg'],
      screenshots: [],
      documents: [],
      metadata: {}
    },
    submittedAt: new Date('2024-03-21T08:20:00Z'),
    status: 'pending',
    priority: 'low',
    votes: [],
    rewards: {
      reporter: BigInt('2000000000000000000'), // 2 tokens
      validators: BigInt('0'), // 0 tokens
    }
  },
]

const violationTypes = Object.values(ViolationType)
const reportStatuses = Object.values(ReportStatus)

export default function Reports() {
  const { reports: storeReports } = useAppStore()
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedTab, setSelectedTab] = useState<'all' | 'my-reports' | 'my-votes'>('all')
  const [selectedStatus, setSelectedStatus] = useState<string>('all')
  const [selectedType, setSelectedType] = useState<string>('all')
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [reports] = useState<Report[]>(storeReports.length > 0 ? storeReports : mockReports)
  const [ipAssetId, setIpAssetId] = useState("")
  const [evidence, setEvidence] = useState("")
  const [stakeAmount, setStakeAmount] = useState("")
  const [description, setDescription] = useState("")

  const filteredReports = reports.filter(report => {
    if (selectedStatus !== 'all' && report.status !== selectedStatus) return false
    if (selectedType !== 'all' && report.violationType !== selectedType) return false
    if (searchQuery && !report.description.toLowerCase().includes(searchQuery.toLowerCase())) return false
    return true
  })

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending':
        return <Clock className="h-4 w-4 text-yellow-500" />
      case 'under_review':
        return <Flag className="h-4 w-4 text-blue-600" />
      case 'resolved':
        return <CheckCircle className="h-4 w-4 text-green-500" />
      case 'rejected':
        return <XCircle className="h-4 w-4 text-red-500" />
      default:
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800'
      case 'under_review':
        return 'bg-blue-100 text-blue-800'
      case 'resolved':
        return 'bg-green-100 text-green-800'
      case 'rejected':
        return 'bg-red-100 text-red-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const handleCreateReport = async(IP_ID: string, EVIDENCE: string, bond: string) => {
    try {
      // Validate IP_ID format
      if (!IP_ID.startsWith('0x') || IP_ID.length !== 42) {
        toast.error('Invalid IP Asset ID format. Must be a valid Ethereum address.')
        return
      }

      const disputeHash = await uploadTextToIPFS(EVIDENCE)
      console.log(`Dispute evidence uploaded to IPFS: ${disputeHash}`)

      // Raise a Dispute
      const disputeResponse = await client.dispute.raiseDispute({
          targetIpId: IP_ID as `0x${string}`,
          cid: disputeHash,
          targetTag: 'IMPROPER_REGISTRATION',
          bond: parseEther(bond),
          liveness: 2592000, // 30 days
          txOptions: { waitForTransaction: true },
      } as any)
      console.log(`Dispute raised at transaction hash ${disputeResponse.txHash}, Dispute ID: ${disputeResponse.disputeId}`)
      
      // Close modal after successful submission
      setShowCreateModal(false)
      // Reset form
      setIpAssetId('')
      setEvidence('')
      setStakeAmount('')
      setDescription('')
    } catch (error) {
      console.error('Error creating report:', error)
      toast.error('Failed to create report. Please try again.')
    }
  }

  const handleVote = (reportId: string, vote: boolean) => {
    console.log('Voting on report:', reportId, 'Vote:', vote)
  }

  const handleStakeOnReport = (reportId: string) => {
    console.log('Staking on report:', reportId)
  }

  const formatViolationType = (type: string) => {
    return type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())
  }

  const formatStatus = (status: string) => {
    return status.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())
  }

  return (
    <div className="max-w-7xl mx-auto">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center justify-between mb-8"
      >
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
            IP Violation Reports
          </h1>
          <p className="text-gray-600">
            Report and review intellectual property violations in the community
          </p>
        </div>
        <button
          onClick={() => setShowCreateModal(true)}
          className="bg-blue-600 text-white hover:bg-blue-700 px-6 py-3 text-base rounded-lg font-medium transition-colors inline-flex items-center"
        >
          <Plus className="h-5 w-5 mr-2" />
          Submit Report
        </button>
      </motion.div>

      {/* Tabs */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="border-b border-gray-200 mb-6"
      >
        <nav className="flex space-x-8">
          {[
            { id: 'all', label: 'All Reports', count: reports.length },
            { id: 'my-reports', label: 'My Reports', count: 2 },
            { id: 'my-votes', label: 'My Votes', count: 5 },
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setSelectedTab(tab.id as any)}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                selectedTab === tab.id
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              {tab.label}
              <span className="ml-2 bg-gray-100 text-gray-600 px-2 py-1 rounded-full text-xs">
                {tab.count}
              </span>
            </button>
          ))}
        </nav>
      </motion.div>

      {/* Filters */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8"
      >
        <div className="flex flex-col lg:flex-row gap-4">
          {/* Search */}
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <input
                type="text"
                placeholder="Search reports..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="block w-full rounded-lg border border-gray-300 pl-10 pr-3 py-2 placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              />
            </div>
          </div>

          {/* Status Filter */}
          <div className="lg:w-48">
            <select
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value)}
              className="block w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-blue-500"
            >
              <option value="all">All Statuses</option>
              {reportStatuses.map((status) => (
                <option key={status} value={status}>
                  {formatStatus(status)}
                </option>
              ))}
            </select>
          </div>

          {/* Type Filter */}
          <div className="lg:w-48">
            <select
              value={selectedType}
              onChange={(e) => setSelectedType(e.target.value)}
              className="block w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-blue-500"
            >
              <option value="all">All Types</option>
              {violationTypes.map((type) => (
                <option key={type} value={type}>
                  {formatViolationType(type)}
                </option>
              ))}
            </select>
          </div>
        </div>
      </motion.div>

      {/* Reports List */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.3 }}
        className="space-y-6"
      >
        {filteredReports.map((report, index) => (
          <motion.div
            key={report.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-lg transition-all duration-300"
          >
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-start space-x-4">
                <div className="p-3 bg-red-100 rounded-lg">
                  <AlertTriangle className="h-6 w-6 text-red-600" />
                </div>
                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">
                      {formatViolationType(report.violationType)}
                    </h3>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(report.status)}`}>
                      {getStatusIcon(report.status)}
                      <span className="ml-1">{formatStatus(report.status)}</span>
                    </span>
                  </div>
                  <p className="text-gray-600 mb-3">{report.description}</p>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <div className="flex items-center">
                        <User className="h-4 w-4 mr-1" />
                        {formatAddress(report.reporterAddress as `0x${string}`)}
                      </div>
                      <div className="flex items-center">
                        <Calendar className="h-4 w-4 mr-1" />
                        {formatDate(report.submittedAt)}
                      </div>
                      <div className="flex items-center">
                        <Coins className="h-4 w-4 mr-1" />
                        {formatEther(report.rewards.reporter, 2)} staked
                      </div>
                    </div>
                </div>
              </div>
              <button className="text-gray-400 hover:text-gray-600 p-2 rounded-lg hover:bg-gray-100 transition-colors">
                <ExternalLink className="h-4 w-4" />
              </button>
            </div>

            {/* Evidence */}
            {report.evidence.urls.length > 0 && (
              <div className="mb-4">
                <h4 className="text-sm font-medium text-gray-900 mb-2">Evidence:</h4>
                <div className="flex flex-wrap gap-2">
                  {report.evidence.urls.map((url: string, idx: number) => (
                    <a
                      key={idx}
                      href={url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded hover:bg-blue-200 transition-colors"
                    >
                      <ExternalLink className="h-3 w-3 mr-1" />
                      Evidence {idx + 1}
                    </a>
                  ))}
                </div>
              </div>
            )}

            {/* Voting Section */}
            {report.status === 'under_review' && (
              <div className="border-t border-gray-200 pt-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-2">Community Voting</h4>
                    <div className="flex items-center space-x-4 text-sm">
                      <span className="text-green-600">
                        {report.votes.filter(v => v.decision === 'valid').length} Valid votes
                      </span>
                      <span className="text-red-600">
                        {report.votes.filter(v => v.decision === 'invalid').length} Invalid votes
                      </span>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => handleVote(report.id, false)}
                      className="border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 px-3 py-2 text-sm rounded-lg transition-colors inline-flex items-center"
                    >
                      <ThumbsDown className="h-4 w-4 mr-2" />
                      Invalid
                    </button>
                    <button
                      onClick={() => handleVote(report.id, true)}
                      className="bg-blue-600 text-white hover:bg-blue-700 px-3 py-2 text-sm rounded-lg transition-colors inline-flex items-center"
                    >
                      <ThumbsUp className="h-4 w-4 mr-2" />
                      Valid
                    </button>
                    <button
                      onClick={() => handleStakeOnReport(report.id)}
                      className="bg-purple-600 text-white hover:bg-purple-700 px-3 py-2 text-sm rounded-lg transition-colors inline-flex items-center"
                    >
                      <Award className="h-4 w-4 mr-2" />
                      Stake
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Votes Display */}
            {report.votes.length > 0 && (
              <div className="border-t border-gray-200 pt-4 mt-4">
                <h4 className="text-sm font-medium text-gray-900 mb-3">Recent Votes</h4>
                <div className="space-y-2">
                  {report.votes.slice(0, 3).map((vote, voteIdx) => (
                    <div key={voteIdx} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className={`p-1 rounded-full ${vote.decision === 'valid' ? 'bg-green-100' : 'bg-red-100'}`}>
                          {vote.decision === 'valid' ? (
                            <ThumbsUp className="h-3 w-3 text-green-600" />
                          ) : (
                            <ThumbsDown className="h-3 w-3 text-red-600" />
                          )}
                        </div>
                        <div>
                          <p className="text-sm font-medium text-gray-900">{formatAddress(vote.validator as `0x${string}`)}</p>
                          {vote.reasoning && (
                            <p className="text-xs text-gray-500">{vote.reasoning}</p>
                          )}
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="text-sm font-medium text-gray-900">{formatEther(vote.stake, 2)} tokens</p>
                        <p className="text-xs text-gray-500">{formatDate(vote.votedAt)}</p>
                      </div>
                    </div>
                  ))}
                  {report.votes.length > 3 && (
                    <button className="text-sm text-blue-600 hover:text-blue-500 transition-colors">
                      View all {report.votes.length} votes
                    </button>
                  )}
                </div>
              </div>
            )}
          </motion.div>
        ))}

        {filteredReports.length === 0 && (
          <div className="text-center py-12">
            <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No reports found</h3>
            <p className="text-gray-600">
              Try adjusting your filters or submit a new report.
            </p>
          </div>
        )}
      </motion.div>

      {/* Create Report Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white rounded-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto"
          >
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-900">Submit IP Violation Report</h2>
              <button
                onClick={() => setShowCreateModal(false)}
                className="text-gray-400 hover:text-gray-600 p-2 rounded-lg hover:bg-gray-100 transition-colors"
              >
                ×
              </button>
            </div>

            <form className="space-y-6" onSubmit={(e) => e.preventDefault()}>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Violation Type</label>
                <select className="block w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-blue-500">
                  {violationTypes.map((type) => (
                    <option key={type} value={type}>
                      {formatViolationType(type)}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">IP Asset ID</label>
                <input
                  type="text"
                  className="block w-full rounded-lg border border-gray-300 px-3 py-2 placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-blue-500"
                  placeholder="Enter the IP asset ID that violates your rights"
                  value={ipAssetId}
                  onChange={(e) => setIpAssetId(e.target.value)}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                <textarea
                  className="block w-full rounded-lg border border-gray-300 px-3 py-2 placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-blue-500"
                  rows={4}
                  placeholder="Provide a detailed description of the violation..."
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  style={{ resize: 'vertical' }}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Evidence</label>
                <textarea
                  className="block w-full rounded-lg border border-gray-300 px-3 py-2 placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-blue-500"
                  rows={3}
                  placeholder="Provide evidence details"
                  value={evidence}
                  onChange={(e) => setEvidence(e.target.value)}
                  style={{ resize: 'vertical' }}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Stake Amount (tokens)</label>
                <input
                  type="number"
                  className="block w-full rounded-lg border border-gray-300 px-3 py-2 placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-blue-500"
                  placeholder="Amount to stake on this report"
                  min="0"
                  step="0.1"
                  value={stakeAmount}
                  onChange={(e) => setStakeAmount(e.target.value)}
                />
                <p className="text-xs text-gray-500 mt-1">
                  Higher stakes increase report credibility but involve more risk
                </p>
              </div>

              <div className="flex items-center justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => setShowCreateModal(false)}
                  className="border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 px-4 py-2 rounded-lg font-medium transition-colors"
                >
                  Cancel
                </button>
                <button 
                  type="button" 
                  className="bg-blue-600 text-white hover:bg-blue-700 px-4 py-2 rounded-lg font-medium transition-colors"
                  onClick={() => handleCreateReport(ipAssetId.startsWith('0x') ? ipAssetId : `0x${ipAssetId}`, `${description}\n${evidence}`, stakeAmount)}
                >
                  Submit Report
                </button>
              </div>
            </form>
          </motion.div>
        </div>
      )}
    </div>
  )
}